package dev.abhaycloud.imagegallerycompose.ui.home

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.drawBehind
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import coil.compose.AsyncImage
import dev.abhaycloud.imagegallerycompose.R
import dev.abhaycloud.imagegallerycompose.model.SingleImage
import dev.abhaycloud.imagegallerycompose.ui.navigation.Screen
import dev.abhaycloud.imagegallerycompose.ui.theme.ButtonBg
import dev.abhaycloud.imagegallerycompose.ui.theme.ScreenBg

@Composable
fun HomeScreen(viewModel: HomeScreenViewModel = hiltViewModel(), navController: NavController) {

    val result = viewModel.imageList.value

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(ScreenBg),
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .background(Color.White),
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Image(
                    painter = painterResource(id = R.drawable.open_ai), contentDescription = null,
                    modifier = Modifier
                        .padding(start = 20.dp, top = 20.dp, bottom = 20.dp)
                        .size(width = 112.dp, height = 30.dp),
                    alignment = Alignment.Center
                )

                Button(
                    onClick = {
                              navController.navigate(Screen.Create.route)
                              },
                    shape = RoundedCornerShape(8.dp),
                    colors = ButtonDefaults.buttonColors(
                        backgroundColor = ButtonBg,
                        contentColor = Color.White
                    ),
                    modifier = Modifier
                        .align(alignment = Alignment.CenterVertically)
                        .padding(end = 20.dp)
                ) {
                    Text(
                        text = "Create",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Bold,
                    )
                }
            }
            Divider()
        }

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(20.dp)
//                .verticalScroll(rememberScrollState())
        ) {
            Text(
                text = "The Community Showcase",
                fontSize = 32.sp,
                fontWeight = FontWeight.Bold
            )

            Text(
                text = "Browse through a collection of imaginative and visually stunning images generated by DALL-E AI",
                fontSize = 16.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF666E75),
                modifier = Modifier.padding(top = 10.dp)
            )

            if (result.isLoading) {
                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                    CircularProgressIndicator()
                }
            }

            if (result.error.isNotBlank()) {
                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                    Text(text = result.error)
                }
            }

            result.data?.let {
                LazyColumn(
                    modifier = Modifier.padding(top = 20.dp),
                ) {
                    items(result.data.reversed()) {
                        SingleImageDesign(it)
                    }
                }
            }

        }

    }
}

@Composable
fun SingleImageDesign(it: SingleImage) {

    val isTitleVisible = remember {
        mutableStateOf(false)
    }
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .padding(top = 15.dp)
            .clickable {
                isTitleVisible.value = !isTitleVisible.value
            },
    ) {
        AsyncImage(
            model = if (it.photo.contains("https")) it.photo else it.photo.replace("http", "https"),
            contentDescription = null,
            modifier = Modifier
                .fillMaxWidth()
                .height(361.dp)
                .clip(RoundedCornerShape(12.dp)),
            contentScale = ContentScale.Crop,
        )

        if (isTitleVisible.value) {
            Card(
                backgroundColor = Color(0xFF10121F),
                shape = RoundedCornerShape(12.dp),
                modifier = Modifier
                    .padding(start = 10.dp, end = 10.dp, bottom = 10.dp)
                    .align(alignment = Alignment.BottomCenter),
            )
            {
                Column(modifier = Modifier.padding(15.dp)) {
                    Text(
                        text = it.prompt,
                        style = TextStyle(
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Medium,
                            color = Color.White
                        )
                    )
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(top = 15.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {

                        Box(modifier = Modifier.clip(RoundedCornerShape(30.dp)).background(Color.Green)) {
                            Text(
                                text = "${it.name.toCharArray()[0]}",
                                style = TextStyle(
                                    fontSize = 13.sp,
                                    fontWeight = FontWeight.Bold,
                                    color = Color.White,
                                    textAlign = TextAlign.Center
                                ),
                                modifier = Modifier.padding(horizontal = 11.dp).padding(vertical = 6.dp)
                            )
                        }

                        Text(
                            text = it.name,
                            style = TextStyle(
                                fontSize = 14.sp,
                                fontWeight = FontWeight.Medium,
                                color = Color.White
                            ),
                            modifier = Modifier.padding(start = 10.dp)
                        )
                    }
                }
            }
        }
    }
}
